9.多线程
9.1线程
package main

import (
	"fmt"
	"sync"
)

var wg sync.WaitGroup // 全局变量，登记开启的子goroutine
func main() { // 开启一个主goroutine执行主函数
	wg.Add(1)  // 计数牌+1 // 开启一个子线程就调用一次，让子线程+1
	go hello(100000) // 调用前加 go 开启一个goroutine去单独执行方法
	fmt.Println("hello main")
	/*
		等待原因是主goroutine有时候比开启的子goroutine先执行完
		主程序先执行完的话资源会被回收，包括它开启的子goroutine，
		就会出现子goroutine未执行完方法就被回收的情况
	*/
	// time.Sleep(time.Second) // 应用中并不能真的sleep，不建议
	// 这种调用同样支持匿名函数
	for i := 0; i < 10000; i++ {
		wg.Add(1)
		go hello(i)
	}
	wg.Wait() // 执行到此处阻塞，等到计数器为0时放行
}

func hello(i int) {
	fmt.Println("Hello Word",i)
	wg.Done() // 子线程执行方法到此处是返回给wg信息,计数牌-1
}
9.2多线程调用匿名函数
package main

import (
	"fmt"
	"sync"
)

var wg sync.WaitGroup

// 多线程调用匿名函数
func main() {
	fmt.Println("Hello Word")
	for i := 0; i < 10000; i++ {
		wg.Add(1)
		// 此处的匿名函数是一个闭包，使用到了外部的变量i，出现打印多个相同的i是因为外部函数快速执行结束，但是此处的闭包函数刚开始调用外部变量
		// 解决办法，显式传递
		/*go func() {
			fmt.Println("HELLO",i)
			wg.Done()
		}()*/
		go func(i int) {
			fmt.Println("HELLO", i)
			wg.Done()
		}(i)// <--此处传入外部的i
	}
	wg.Wait()
}
9.3通道
package main

import "fmt"

// channel通道：go语言实现内存同步是通过通信实现的
func main() {
	// 声明通道类型格式： var 变量名 chan 变量类型，可以理解在这个通道中都是对应类型的数据
	// 通道是引用类型，空值为nil
	var ch1 chan int
	var ch2 chan bool
	var ch3 chan []int
	fmt.Println(ch1, ch2, ch3) // <nil> <nil> <nil>
	// 初始化通道需要使用make(chan 元素类型,[缓存大小](可省略))
	/*
		无缓冲区的通道，添加值的时候会造成线程阻塞，只有取值的时候阻塞才会停止
	*/
	ch4 := make(chan int, 15)
	ch5 := make(chan int)
	fmt.Println(ch4, ch5)
	// channel操作
	// 发送
	ch4 <- 3
	ch4 <- 5
	// ch5 <- 2 //向未规定缓存容量的通道发送值会造成死锁
	// 接收
	x := <-ch4
	<-ch4
	fmt.Println(x)
	// 关闭
	close(ch4) // 空的时候自动关闭
}
package main

import "fmt"

/**
1.向通道1中添加100个值
2.从通道1中取出值计算平方发送到通道2
3.从通道2中取出平方值
*/
// 通道小练习
func main() {
	ch1 := make(chan int, 100)
	ch2 := make(chan int, 100)
	go sendNum(ch1)
	go calcNum(ch1, ch2)
	// 从通道中取值的方式2
	for res := range ch2 {
		fmt.Println(res)
	}
}
func sendNum(ch chan int) {
	for i := 0; i < 100; i++ {
		ch <- i
	}
	close(ch)
}
// 单项通道，只能取值或只能发送值的通道,<-ch:只能取值,ch<-只能发送
func calcNum(ch1 <-chan int, ch2 chan<- int) {
	// 从通道中取值的方式1
	for {
		temp, ok := <-ch1
		if !ok {
			break
		}
		ch2 <- temp * temp
	}
	close(ch2)
}
9.3select:从多个通道中取值,多路复用
package main

import "fmt"

// 从多个通道中取值,多路复用
/**
从多个通道中(接收/取值)时,select的每个case可以对应一个通道,
知道某个case的操作完成后,才会中该case下的代码操作.如下取值就打印
1.可处理一个或多个channel的发送/接收操作。
2.如果多个case同时满足，select会随机选择一个
3.没有case的select会一直等待,可用于阻塞main函数
*/
func main() {
	ch := make(chan int, 10)
	for i := 0; i < 10; i++ {
		select {
		// 能取值就打印
		case x := <-ch:
			fmt.Println(x)
		//能发送值就发送
		case ch <- i:
		default:
			fmt.Println("nothing")
		}
	}
}
9.4work_pool
package main

import (
	"fmt"
	"sync"
)
var wg sync.WaitGroup
func main() {
	jobs := make(chan int, 100)
	results := make(chan int, 100)
	// 开启3个goroutine
	for j := 0; j < 3; j++ {
		wg.Add(1)
		go worker(j, jobs, results)
	}
	// 发送5个任务
	for i := 0; i < 5; i++ {
		jobs <- i
	}
	close(jobs)
	// 对通道进行遍历,如果通道没关闭,取不到值的时候会造成死锁
	for x := 0; x < 5; x++ {
		fmt.Printf("计算结果:%v\n", <-results)
	}
	wg.Wait()
}
/*
	线程再次执行任务,是假象,本质上单个线程也能完成,但是多线程是多个任务
	放入通道,三个线程同时执行,从通道中循环取任务,抢占到任务的线程就去执行
	所以会出现有些线程执行了两次任务
 */
func worker(id int, jobs chan int, results chan int) {
	for job := range jobs {
		fmt.Printf("workID:%d,start job:%d\n", id, job)
		results <- job * job
		fmt.Printf("workID:%d,stop job:%d\n", id, job)
	}
	wg.Done()
}
9.5lock锁
package main

import (
	"fmt"
	"sync"
)

var (
	x    int
	wg   sync.WaitGroup
	lock sync.Mutex // 互斥锁
)

// 资源竞争,多个goroutine抢占同一个资源
func main() {
	wg.Add(2)
	go Add()
	go Add()
	wg.Wait()
	fmt.Println(x)
}

func Add() {
	for i := 0; i < 5000; i++ {
		lock.Lock()
		x += 1
		lock.Unlock()
	}
	wg.Done()
}
9.6rwlock读写锁
package main

import (
	"fmt"
	"sync"
	"time"
)

var (
	x      int
	lock   sync.Mutex //互斥锁
	wg     sync.WaitGroup
	rwlock sync.RWMutex //读写锁
)
// 除了这两种锁,go原生提供了基本类型自带原子锁的操作方法,比这两种锁的性能要高
func main() {
	start := time.Now()
	for i := 0; i < 10000; i++ {
		wg.Add(1)
		go read()
	}
	for i := 0; i < 10; i++ {
		wg.Add(1)
		go writer()
	}
	wg.Wait()
	// 互斥锁:11.9458497s 读写互斥锁:21.8359ms
	fmt.Println(time.Now().Sub(start))
}

func read() {
	// lock.Lock()
	rwlock.RLock()
	time.Sleep(time.Millisecond)
	wg.Done()
	// lock.Unlock()
	rwlock.RUnlock()
}

func writer() {
	// lock.Lock()
	rwlock.RLock()
	x += 1
	time.Sleep(time.Millisecond * 5)
	wg.Done()
	// lock.Unlock()
	rwlock.RUnlock()
}
9.7sync.once
package main

import (
	"fmt"
	"sync"
)

var (
	wg   sync.WaitGroup
	once sync.Once
)

// sync.Once:并发场景下让一些函数只执行一次，比如关闭通道，二次执行会报错
func main() {
	wg.Add(3)
	ch1 := make(chan int, 100)
	ch2 := make(chan int, 100)
	go f1(ch1)
	go f2(ch1, ch2)
	go f2(ch1, ch2)
	for v := range ch2 {
		fmt.Println(v)
	}
	wg.Wait()
}
func f1(ch chan int) {
	defer wg.Done()
	for i := 0; i < 100; i++ {
		ch <- i
	}
	close(ch)
}
func f2(ch1 <-chan int, ch2 chan<- int) {
	defer wg.Done()
	for {
		v, ok := <-ch1
		if !ok {
			break
		}
		ch2 <- v * v
	}
	// close(ch2) // panic: close of closed channel:关闭一个关闭了的通道
	// 解决
	// 闭包
	f:= func() {
		close(ch2)
	}
	once.Do(f) // 参数为一个函数类型
}
9.8sync.Map
package main

import (
	"fmt"
	"sync"
)

var m = make(map[int]int) //普通的map不是线程安全的,不支持并发操作
var (
	wg sync.WaitGroup
	// m2 sync.Map{} 1.9版本才出现 线程安全,线程安全,设置值与取值与map不同
)
func main() {
	for i := 0; i < 20; i++ {
		wg.Add(1)
		go func(i int) {
			set(i, i+100)
			fmt.Printf("key:%d,value:%d\n", i, getValue(i))
			wg.Done()
		}(i)
	}
	wg.Wait()
}

func getValue(key int) int {
	return m[key]
}
func set(key int, value int) {
	m[key] = value
}
10.网络编程
10.1TCP
10.1.1server
package main

import (
	"bufio"
	"fmt"
	"net"
)

func main() {
	// 1.开启服务
	listen, err := net.Listen("tcp", "127.0.0.1:20000")
	if err != nil {
		fmt.Printf("listen faild,err:%v\n",err)
		return
	}
	for {
		// 2.监听端口等待客户连接,连接后创建连接
		conn, err := listen.Accept()
		if err != nil {
			fmt.Printf("accept faild,err:%v\n",err)
			continue
		}
		// 3.启动一个单独的线程处理连接
		go process(conn)

	}
}

func process(conn net.Conn) {
	defer conn.Close() // 处理完关闭连接
	// 4.针对当前连接做数据的发送和接收操作
	for  {
		reader := bufio.NewReader(conn)
		var buf [128]byte
		n, err := reader.Read(buf[:])
		if err != nil {
			fmt.Printf("read from conn failed,err:%v\n",err)
			break
		}
		recv:=string(buf[:n])
		fmt.Printf("接收到的数据:%v\n",recv)
		conn.Write([]byte("ok"))// 接收成功,返回客户端
	}
}
10.1.2Client
package main

import (
	"bufio"
	"fmt"
	"net"
	"os"
	"strings"
)

// TCP client demo
func main() {
	// 1.与服务端建立连接
	conn, err := net.Dial("tcp", "127.0.0.1:20000")
	if err != nil {
		fmt.Printf("Dial failed, err:%v\n", err)
		return
	}
	// 2.发送数据
	// 读取用户输入,写入连接发送数据
	reader := bufio.NewReader(os.Stdin)
	for {
		// 返回读取到的用户输入字符
		s, _ := reader.ReadString('\n')
		// 去除空格
		s = strings.TrimSpace(s)
		if strings.ToUpper(s) == "Q" {
			return
		}
		// 将输入字符写入连接
		_, err := conn.Write([]byte(s))
		if err != nil {
			fmt.Printf("send faild, err:%v\n", err)
			return
		}

		// 3.接收响应
		var buf [1024]byte
		n, err := conn.Read(buf[:]) // 返回是否成功与读取字节数
		if err != nil {
			fmt.Printf("接收响应失败,err:%v\n",err)
		}
		s2 := string(buf[:n])
		fmt.Println("响应为:",s2)

	}
}
10.2UDP
10.2.1Server
package main

import (
	"fmt"
	"net"
)

// udp server demo
func main() {
	// 启动服务,监听
	listen, err := net.ListenUDP("udp", &net.UDPAddr{
		IP:   net.IPv4(127, 0, 0, 1),
		Port: 30000,
	})
	if err != nil {
		fmt.Printf("listen udp failed,err:%v\n",err)
	}
	defer listen.Close()
	// 读取数据
	for {
		var buf [1024]byte
		n, addr, err := listen.ReadFromUDP(buf[:]) // 从udp中读取,返回读取的字节数,对方ip地址,是否成功
		if err != nil {
			fmt.Printf("read from udp failed,err:%v\n",err)
			return
		}
		s := string(buf[:n])
		fmt.Printf("接收到的数据为:%v,地址为:%v\n",s,addr)
		// 响应
		listen.WriteToUDP([]byte("ok"),addr)
	}
}
10.2.2Client
package main

import (
	"bufio"
	"fmt"
	"net"
	"os"
	"strings"
)

// upd client demo
func main() {
	udp, err := net.DialUDP("udp", nil, &net.UDPAddr{
		IP:   net.IPv4(127, 0, 0, 1),
		Port: 30000,
	})
	if err != nil {
		fmt.Printf("Dial udp failed err:%v\n",err)
		return
	}
	defer udp.Close()
	reader := bufio.NewReader(os.Stdin)
	for {
		s, err := reader.ReadString('\n')
		if err != nil {
			fmt.Printf("read failed err:%v\n",err)
		}
		s = strings.TrimSpace(s)
		// 发送数据
		_, err = udp.Write([]byte(s))
		if err != nil {
			fmt.Printf("")
			return
		}
		// 接受响应
		var buf [1024]byte
		n, addr, err := udp.ReadFromUDP(buf[:])
		if err != nil {
			fmt.Println("接收响应失败,错误:",err)
			return
		}
		s2 := string(buf[:n])
		fmt.Printf("响应接收成功,地址:%v,结果:%v\n",addr,s2)
	}
}
11.单元测试
package Split

import "strings"

// Split 将字符串s以sep为分隔符分割
func Split(s, sep string) (ret []string) {
	// 初始化避免每次append都去申请内存,性能翻倍
	ret = make([]string, 0, strings.Count(s, sep)+1)
	idx := strings.Index(s, sep)
	for idx > -1 {
		ret = append(ret, s[:idx])
		// len(sep)可以解决传入的分隔符长度不固定的问题,如字母占一个字节,中文字占3个
		s = s[idx+len(sep):]
		idx = strings.Index(s, sep)
	}
	ret = append(ret, s)
	return
}

package Split

import (
	"reflect"
	"testing"
)

/*func TestSplit(t *testing.T) {
	//got := Split("a:b:c",":")
	//want := []string{"a","b","c"}
	got := Split("我爱你","爱")
	want := []string{"我","你"}
	equal := reflect.DeepEqual(got, want)
	if !equal {
		t.Errorf("want:%v,got:%v\n",want,got)
	}
}*/
// 多个测试用例
func TestSplit(t *testing.T) {
	// 创建一个测试相关的结构体,属性包括参数与返回值
	type test struct {
		input string
		sep string
		want []string
	}
	tests := map[string]test{
		"simple": {
			input: "我爱你",
			sep:   "爱",
			want: []string{"我","你"},
		},
		"multi one": {
			input: "a:b:c",
			sep:   ":",
			want:  []string{"a","b","c"},
		},
		"Chinese": {
			input: "沙河有沙又有河",
			sep:   "沙",
			want:  []string{"","河有","又有河"},
		},
	}
	// map遍历返回key与value
	for name, tc := range tests {
		// 使用t.run可以在运行多组测试用例是使用go test -v命令查看每组测试用例的执行情况
		t.Run(name, func(t *testing.T) {
			got:=Split(tc.input,tc.sep)
			equal := reflect.DeepEqual(got, tc.want)
			if !equal {
				t.Errorf("name:%v,want:%v,got:%v\n",name,tc.want,got)
			}
		})
	}
}
func BenchmarkSplit(b *testing.B) {
	// b.N不是固定的数
	for i := 0; i < b.N; i++ {
		Split("沙河有沙又有河","沙")
	}
}
